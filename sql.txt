-- Создайте таблицы (упростённо)
create table users (
  id uuid primary key default gen_random_uuid(),
  username text unique not null,
  avatar text,
  password text not null
);

create table servers (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  owner_id uuid references users(id),
  invite_code text unique
);

create table server_members (
  id uuid primary key default gen_random_uuid(),
  server_id uuid references servers(id),
  user_id uuid references users(id)
);

create table channels (
  id uuid primary key default gen_random_uuid(),
  server_id uuid references servers(id),
  name text not null,
  type text not null default 'text'
);

create table messages (
  id uuid primary key default gen_random_uuid(),
  server_id uuid references servers(id),
  channel_id uuid references channels(id),
  user_id uuid references users(id),
  username text,
  avatar text,
  content text,
  og_site_name text,
  og_title text,
  og_description text,
  og_image text,
  og_url text
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  replied_to_id uuid references messages(id) on delete set null
);

CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

//storage policy

CREATE POLICY "Allow public upload to avatars with userId"
ON storage.objects
FOR INSERT
TO public
WITH CHECK (
  bucket_id = 'avatars' AND
  name LIKE 'avatars/%'
);

CREATE POLICY "Public read avatars"
ON storage.objects
FOR SELECT
TO public
USING (bucket_id = 'avatars');

CREATE POLICY "Allow public update avatars"
ON storage.objects
FOR UPDATE
TO public
USING (bucket_id = 'avatars')
WITH CHECK (bucket_id = 'avatars' AND name LIKE 'avatars/%');